<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZCL_LOGGER" VERSION="1" LANGU="E" DESCRIPT="Interface to Application Log" UUID="005056945E9B1EE48CDAF5EF425E8D81" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <publicSection>class ZCL_LOGGER definition
  public
  create private .

public section.
*&quot;* public components of class ZCL_LOGGER
*&quot;* do not include other source files here!!!

  data HEADER type BAL_S_LOG read-only .
  data HANDLE type BALLOGHNDL read-only .
  data DB_NUMBER type BALOGNR read-only .

  class-methods NEW
    importing
      !OBJECT type CSEQUENCE optional
      !SUBOBJECT type CSEQUENCE optional
      !DESC type CSEQUENCE optional
      !CONTEXT type SIMPLE optional
    returning
      value(R_LOG) type ref to ZCL_LOGGER .
  type-pools ABAP .
  class-methods OPEN
    importing
      !OBJECT type CSEQUENCE
      !SUBOBJECT type CSEQUENCE
      !DESC type CSEQUENCE optional
      !CREATE_IF_DOES_NOT_EXIST type ABAP_BOOL default ABAP_FALSE
    returning
      value(R_LOG) type ref to ZCL_LOGGER .
  methods ADD
    importing
      !OBJ_TO_LOG type ANY optional
      !CONTEXT type SIMPLE optional
      !CALLBACK_FORM type CSEQUENCE optional
      !CALLBACK_PROG type CSEQUENCE optional
      !CALLBACK_FM type CSEQUENCE optional
      !TYPE type SYMSGTY optional
      !IMPORTANCE type BALPROBCL optional
    preferred parameter OBJ_TO_LOG
    returning
      value(SELF) type ref to ZCL_LOGGER .
  methods A
    importing
      !OBJ_TO_LOG type ANY optional
      !CONTEXT type SIMPLE optional
      !CALLBACK_FORM type CSEQUENCE optional
      !CALLBACK_PROG type CSEQUENCE optional
      !CALLBACK_FM type CSEQUENCE optional
      !IMPORTANCE type BALPROBCL optional
    preferred parameter OBJ_TO_LOG
    returning
      value(SELF) type ref to ZCL_LOGGER .
  methods E
    importing
      !OBJ_TO_LOG type ANY optional
      !CONTEXT type SIMPLE optional
      !CALLBACK_FORM type CSEQUENCE optional
      !CALLBACK_PROG type CSEQUENCE optional
      !CALLBACK_FM type CSEQUENCE optional
      !IMPORTANCE type BALPROBCL optional
    preferred parameter OBJ_TO_LOG
    returning
      value(SELF) type ref to ZCL_LOGGER .
  methods W
    importing
      !OBJ_TO_LOG type ANY optional
      !CONTEXT type SIMPLE optional
      !CALLBACK_FORM type CSEQUENCE optional
      !CALLBACK_PROG type CSEQUENCE optional
      !CALLBACK_FM type CSEQUENCE optional
      !IMPORTANCE type BALPROBCL optional
    preferred parameter OBJ_TO_LOG
    returning
      value(SELF) type ref to ZCL_LOGGER .
  methods I
    importing
      !OBJ_TO_LOG type ANY optional
      !CONTEXT type SIMPLE optional
      !CALLBACK_FORM type CSEQUENCE optional
      !CALLBACK_PROG type CSEQUENCE optional
      !CALLBACK_FM type CSEQUENCE optional
      !IMPORTANCE type BALPROBCL optional
    preferred parameter OBJ_TO_LOG
    returning
      value(SELF) type ref to ZCL_LOGGER .
  methods S
    importing
      !OBJ_TO_LOG type ANY optional
      !CONTEXT type SIMPLE optional
      !CALLBACK_FORM type CSEQUENCE optional
      !CALLBACK_PROG type CSEQUENCE optional
      !CALLBACK_FM type CSEQUENCE optional
      !IMPORTANCE type BALPROBCL optional
    preferred parameter OBJ_TO_LOG
    returning
      value(SELF) type ref to ZCL_LOGGER .
  methods POPUP .
  methods FULLSCREEN .</publicSection>
 <protectedSection>protected section.
*&quot;* protected components of class ZCL_LOGGER
*&quot;* do not include other source files here!!!</protectedSection>
 <privateSection>private section.
*&quot;* private components of class ZCL_LOGGER
*&quot;* do not include other source files here!!!

  type-pools ABAP .
  data AUTO_SAVE type ABAP_BOOL .</privateSection>
 <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
 <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <localTestClasses>CLASS lcl_test DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
*?#&lt;asx:abap xmlns:asx=&quot;http://www.sap.com/abapxml&quot; version=&quot;1.0&quot;&gt;
*?&lt;asx:values&gt;
*?&lt;TESTCLASS_OPTIONS&gt;
*?&lt;TEST_CLASS&gt;lcl_Test
*?&lt;/TEST_CLASS&gt;
*?&lt;TEST_MEMBER&gt;f_Cut
*?&lt;/TEST_MEMBER&gt;
*?&lt;OBJECT_UNDER_TEST&gt;ZCL_LOGGER
*?&lt;/OBJECT_UNDER_TEST&gt;
*?&lt;OBJECT_IS_LOCAL/&gt;
*?&lt;GENERATE_FIXTURE/&gt;
*?&lt;GENERATE_CLASS_FIXTURE/&gt;
*?&lt;GENERATE_INVOCATION/&gt;
*?&lt;GENERATE_ASSERT_EQUAL/&gt;
*?&lt;/TESTCLASS_OPTIONS&gt;
*?&lt;/asx:values&gt;
*?&lt;/asx:abap&gt;
  PRIVATE SECTION.

    DATA:
      anon_log     TYPE REF TO zcl_logger,
      named_log    TYPE REF TO zcl_logger,
      reopened_log TYPE REF TO zcl_logger.

    CLASS-METHODS:
      class_setup.
*      class_teardown.

    METHODS:
      setup,
      teardown,
      get_first_message
        IMPORTING log_handle TYPE balloghndl
        RETURNING value(msg) TYPE char255,
      get_messages
        IMPORTING
          log_handle TYPE balloghndl
        EXPORTING
          texts TYPE table_of_strings
          msg_details TYPE bal_t_msg,

      can_create_anon_log FOR TESTING,
      can_create_named_log FOR TESTING,
      can_reopen_log FOR TESTING,
      can_open_or_create FOR TESTING,

      can_add_log_context FOR TESTING,

      can_add_to_log FOR TESTING,
      can_add_to_named_log FOR TESTING,

      auto_saves_named_log FOR TESTING,
      auto_saves_reopened_log FOR TESTING,

      can_log_string FOR TESTING,
      can_log_char   FOR TESTING,
      can_log_bapiret2 FOR TESTING,
      can_log_bapirettab FOR TESTING,
      can_log_err FOR TESTING,
      can_log_batch_msgs FOR TESTING,

      can_add_msg_context FOR TESTING,
      can_add_callback_sub FOR TESTING,
      can_add_callback_fm  FOR TESTING,

      must_use_factory FOR TESTING,

      can_use_and_chain_aliases FOR TESTING.

ENDCLASS.       &quot;lcl_Test

CLASS lcl_test IMPLEMENTATION.

  METHOD class_setup.
    zcl_logger=&gt;new(
      object = &apos;ABAPUNIT&apos;
      subobject = &apos;LOGGER&apos;
      desc = &apos;Log saved in database&apos; )-&gt;add( &apos;This message is in the database&apos; ).
  ENDMETHOD.

  METHOD setup.
    anon_log = zcl_logger=&gt;new( ).
    named_log = zcl_logger=&gt;new( object = &apos;ABAPUNIT&apos;
                                 subobject = &apos;LOGGER&apos;
                                 desc = `Hey it&apos;s a log` ).
    reopened_log = zcl_logger=&gt;open( object = &apos;ABAPUNIT&apos;
                                     subobject = &apos;LOGGER&apos;
                                     desc = &apos;Log saved in database&apos; ).
  ENDMETHOD.

  METHOD can_create_anon_log.
    cl_aunit_assert=&gt;assert_bound(
      act = anon_log
      msg = &apos;Cannot Instantiate Anonymous Log&apos; ).
  ENDMETHOD.

  METHOD can_create_named_log.
    cl_aunit_assert=&gt;assert_bound(
      act = named_log
      msg = &apos;Cannot Instantiate Named Log&apos; ).
  ENDMETHOD.

  METHOD can_reopen_log.
    cl_aunit_assert=&gt;assert_bound(
      act = reopened_log
      msg = &apos;Cannot Reopen Log from DB&apos; ).
  ENDMETHOD.

  METHOD can_open_or_create.
    DATA: created_log TYPE REF TO zcl_logger,
          handles TYPE bal_t_logh.
    CALL FUNCTION &apos;BAL_GLB_MEMORY_REFRESH&apos;. &quot;Close Logs
    reopened_log = zcl_logger=&gt;open( object = &apos;ABAPUNIT&apos;
                                     subobject = &apos;LOGGER&apos;
                                     desc = &apos;Log saved in database&apos;
                                     create_if_does_not_exist = abap_true ).
    created_log = zcl_logger=&gt;open( object = &apos;ABAPUNIT&apos;
                                    subobject = &apos;LOGGER&apos;
                                    desc = &apos;Log not in database&apos;
                                    create_if_does_not_exist = abap_true ).
    CALL FUNCTION &apos;BAL_GLB_SEARCH_LOG&apos;
      IMPORTING
        e_t_log_handle = handles.

    cl_aunit_assert=&gt;assert_equals(
      exp = 2
      act = lines( handles )
      msg = &apos;Did not create nonexistent log from OPEN&apos; ).

  ENDMETHOD.

  METHOD can_add_log_context.
    DATA: log TYPE REF TO zcl_logger,
          random_currency_data TYPE t001a,
          act_header TYPE bal_s_log.
    random_currency_data-mandt = sy-mandt.
    random_currency_data-bukrs = &apos;0755&apos;.
    random_currency_data-curtp = &apos;AB&apos;.
    random_currency_data-kurst = &apos;CDEF&apos;.
    random_currency_data-cursr = &apos;G&apos;.

    log = zcl_logger=&gt;new( context = random_currency_data ).

    CALL FUNCTION &apos;BAL_LOG_HDR_READ&apos;
      EXPORTING
        i_log_handle = log-&gt;handle
      IMPORTING
        e_s_log      = act_header.

    cl_aunit_assert=&gt;assert_equals(
      exp = &apos;T001A&apos;
      act = act_header-context-tabname
      msg = &apos;Did not add context to log&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      exp = random_currency_data
      act = act_header-context-value
      msg = &apos;Did not add context to log&apos; ).

  endmethod.

    METHOD can_add_to_log.
      DATA: dummy TYPE c.

      MESSAGE s001(00) WITH &apos;I&apos; &apos;test&apos; &apos;the&apos; &apos;logger.&apos; INTO dummy.
      anon_log-&gt;add( ).

      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Itestthelogger.&apos;
        act = get_first_message( anon_log-&gt;handle )
        msg = &apos;Did not log system message properly&apos; ).

    ENDMETHOD.

    METHOD can_add_to_named_log.
      DATA: dummy TYPE c.

      MESSAGE s001(00) WITH &apos;Testing&apos; &apos;a&apos; &apos;named&apos; &apos;logger.&apos; INTO dummy.
      named_log-&gt;add( ).

      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Testinganamedlogger.&apos;
        act = get_first_message( named_log-&gt;handle )
        msg = &apos;Did not write to named log&apos; ).
    ENDMETHOD.

    METHOD auto_saves_named_log.
      DATA: dummy TYPE c,
            log_numbers TYPE bal_t_logn.

      MESSAGE s004(rcc_test) WITH &apos;Testing&apos; &apos;logger&apos; &apos;that&apos; &apos;saves.&apos; INTO dummy.
      named_log-&gt;add( ).

      CALL FUNCTION &apos;BAL_GLB_MEMORY_REFRESH&apos;.

      APPEND named_log-&gt;db_number TO log_numbers.
      CALL FUNCTION &apos;BAL_DB_LOAD&apos;
        EXPORTING
          i_t_lognumber = log_numbers.

      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Message: Testing logger that saves.&apos;
        act = get_first_message( named_log-&gt;handle )
        msg = &apos;Did not write to named log&apos; ).

    ENDMETHOD.

    METHOD auto_saves_reopened_log.
      DATA: log_numbers TYPE bal_t_logn,
            act_texts TYPE table_of_strings,
            act_text TYPE string.
      reopened_log-&gt;add( &apos;This is another message in the database&apos; ).
      CALL FUNCTION &apos;BAL_GLB_MEMORY_REFRESH&apos;.

      APPEND reopened_log-&gt;db_number TO log_numbers.
      CALL FUNCTION &apos;BAL_DB_LOAD&apos;
        EXPORTING
          i_t_lognumber = log_numbers.

      get_messages( EXPORTING log_handle  = reopened_log-&gt;handle
                    IMPORTING texts       = act_texts ).

      READ TABLE act_texts INDEX 1 INTO act_text.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;This message is in the database&apos;
        act = act_text
        msg = &apos;Did not autosave to reopened log&apos; ).

      READ TABLE act_texts INDEX 2 INTO act_text.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;This is another message in the database&apos;
        act = act_text
        msg = &apos;Did not autosave to reopened log&apos; ).

    ENDMETHOD.

    METHOD can_log_string.
      DATA: stringmessage TYPE string VALUE `Logging a string, guys!`.
      anon_log-&gt;add( stringmessage ).

      cl_aunit_assert=&gt;assert_equals(
        exp = stringmessage
        act = get_first_message( anon_log-&gt;handle )
        msg = &apos;Did not log system message properly&apos; ).

    ENDMETHOD.

    METHOD can_log_char.
      DATA: charmessage TYPE char70 VALUE &apos;Logging a char sequence!&apos;.
      anon_log-&gt;add( charmessage ).

      cl_aunit_assert=&gt;assert_equals(
        exp = charmessage
        act = get_first_message( anon_log-&gt;handle )
        msg = &apos;Did not log system message properly&apos; ).
    ENDMETHOD.

    METHOD can_log_bapiret2.
      DATA: bapi_msg TYPE bapiret2,
            msg_handle TYPE balmsghndl,
            expected_details TYPE bal_s_msg,
            actual_details TYPE bal_s_msg,
            actual_text TYPE char200.

      expected_details-msgty = bapi_msg-type = &apos;W&apos;.
      expected_details-msgid = bapi_msg-id = &apos;BL&apos;.
      expected_details-msgno = bapi_msg-number = &apos;001&apos;.
      expected_details-msgv1 = bapi_msg-message_v1 = &apos;This&apos;.
      expected_details-msgv2 = bapi_msg-message_v2 = &apos;is&apos;.
      expected_details-msgv3 = bapi_msg-message_v3 = &apos;a&apos;.
      expected_details-msgv4 = bapi_msg-message_v4 = &apos;test&apos;.

      anon_log-&gt;add( bapi_msg ).

      msg_handle-log_handle = anon_log-&gt;handle.
      msg_handle-msgnumber = &apos;000001&apos;.

      CALL FUNCTION &apos;BAL_LOG_MSG_READ&apos;
        EXPORTING
          i_s_msg_handle = msg_handle
        IMPORTING
          e_s_msg        = actual_details
          e_txt_msg      = actual_text.

      cl_aunit_assert=&gt;assert_not_initial(
        act = actual_details-time_stmp
        msg = &apos;Did not log system message properly&apos; ).

      expected_details-msg_count = 1.
      CLEAR actual_details-time_stmp.

      cl_aunit_assert=&gt;assert_equals(
        exp = expected_details
        act = actual_details
        msg = &apos;Did not log system message properly&apos; ).

      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;This is a test&apos;
        act = condense( actual_text )
        msg = &apos;Did not log system message properly&apos; ).
    ENDMETHOD.

    METHOD can_log_bapirettab.
      DATA: bapi_messages TYPE bapirettab,
            bapi_msg      TYPE bapiret2,
            exp_texts     TYPE table_of_strings,
            exp_text      TYPE string,
            exp_details   TYPE bal_t_msg,
            exp_detail    TYPE bal_s_msg,
            act_texts     TYPE table_of_strings,
            act_text      TYPE string,
            act_details   TYPE bal_t_msg,
            act_detail    TYPE bal_s_msg.

      DEFINE messages_are.
        exp_detail-msgty = bapi_msg-type = &amp;1.
        exp_detail-msgid = bapi_msg-id   = &amp;2.
        exp_detail-msgno = bapi_msg-number = &amp;3.
        exp_detail-msgv1 = bapi_msg-message_v1 = &amp;4.
        exp_detail-msgv2 = bapi_msg-message_v2 = &amp;5.
        exp_detail-msgv3 = bapi_msg-message_v3 = &amp;6.
        exp_detail-msgv4 = bapi_msg-message_v4 = &amp;7.
        exp_text = |{ exp_detail-msgv1 } { exp_detail-msgv2 } {
                      exp_detail-msgv3 } { exp_detail-msgv4 }|.
        append bapi_msg to bapi_messages.
        append exp_detail to exp_details.
        append exp_text to exp_texts.
      END-OF-DEFINITION.

      messages_are: &apos;S&apos; &apos;BL&apos; &apos;001&apos; &apos;This&apos; &apos;is&apos; &apos;happy&apos; &apos;message&apos;,
                    &apos;W&apos; &apos;BL&apos; &apos;001&apos; &apos;This&apos; &apos;is&apos; &apos;warning&apos; &apos;message&apos;,
                    &apos;E&apos; &apos;BL&apos; &apos;001&apos; &apos;This&apos; &apos;is&apos; &apos;angry&apos; &apos;message&apos;.

      anon_log-&gt;add( bapi_messages ).

      get_messages( EXPORTING log_handle  = anon_log-&gt;handle
                    IMPORTING texts       = act_texts
                              msg_details = act_details ).

      DO 3 TIMES.
        READ TABLE act_details INTO act_detail INDEX sy-index.
        READ TABLE exp_details INTO exp_detail INDEX sy-index.

        cl_aunit_assert=&gt;assert_not_initial(
          act = act_detail-time_stmp
          msg = &apos;Did not log system message properly&apos; ).

        exp_detail-msg_count = 1.
        CLEAR act_detail-time_stmp.

        cl_aunit_assert=&gt;assert_equals(
          exp = exp_detail
          act = act_detail
          msg = &apos;Did not log bapirettab properly&apos; ).

        READ TABLE act_texts INTO act_text INDEX sy-index.
        READ TABLE exp_texts INTO exp_text INDEX sy-index.
        cl_aunit_assert=&gt;assert_equals(
          exp = exp_text
          act = condense( act_text )
          msg = &apos;Did not log bapirettab properly&apos; ).
      ENDDO.

    ENDMETHOD.

    METHOD can_log_err.
      DATA: impossible_int TYPE i,
            err TYPE REF TO cx_sy_zerodivide,
            act_txt TYPE char255,
            msg_handle TYPE balmsghndl.

      TRY.
          impossible_int = 1 / 0. &quot;Make an error!
        CATCH cx_sy_zerodivide INTO err.
          anon_log-&gt;add( err ).
      ENDTRY.

      msg_handle-log_handle = anon_log-&gt;handle.
      msg_handle-msgnumber = &apos;000001&apos;.
      CALL FUNCTION &apos;BAL_LOG_EXCEPTION_READ&apos;
        EXPORTING
          i_s_msg_handle = msg_handle
        IMPORTING
          e_txt_msg      = act_txt.

      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Division by zero&apos;
        act = act_txt
        msg = &apos;Did not log throwable correctly&apos; ).

    ENDMETHOD.

    METHOD can_log_batch_msgs.
      DATA: batch_msgs TYPE TABLE OF bdcmsgcoll,
            batch_msg TYPE bdcmsgcoll,
            act_texts TYPE table_of_strings,
            act_text TYPE string.

      DEFINE messages_are.
        batch_msg-msgtyp = &amp;1.
        batch_msg-msgid = &amp;2.
        batch_msg-msgnr = &amp;3.
        batch_msg-msgv1 = &amp;4.
        batch_msg-msgv2 = &amp;5.
        batch_msg-msgv3 = &amp;6.
        batch_msg-msgv4 = &amp;7.
        APPEND batch_msg TO batch_msgs.
      END-OF-DEFINITION.

      messages_are:
        &apos;S&apos; &apos;RCC_TEST&apos; &apos;001&apos; &apos;&apos;     &apos;&apos;   &apos;&apos;     &apos;&apos;,
        &apos;S&apos; &apos;RCC_TEST&apos; &apos;002&apos; &apos;&apos;     &apos;&apos;   &apos;&apos;     &apos;&apos;,
        &apos;S&apos; &apos;RCC_TEST&apos; &apos;004&apos; &apos;This&apos; &apos;is&apos; &apos;test&apos; &apos;message&apos;.

      anon_log-&gt;add( batch_msgs ).

      get_messages( EXPORTING log_handle = anon_log-&gt;handle
                    IMPORTING texts      = act_texts ).

      READ TABLE act_texts INDEX 1 INTO act_text.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Message 1&apos;
        act = act_text
        msg = &apos;Did not log BDC return messages correctly&apos; ).

      READ TABLE act_texts INDEX 2 INTO act_text.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Message 2&apos;
        act = act_text
        msg = &apos;Did not log BDC return messages correctly&apos; ).

      READ TABLE act_texts INDEX 3 INTO act_text.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Message: This is test message&apos;
        act = act_text
        msg = &apos;Did not log BDC return messages correctly&apos; ).

    ENDMETHOD.

    METHOD can_add_msg_context.
      DATA: addl_context TYPE bseg-belnr VALUE &apos;4700012345&apos;,
            msg_handle TYPE balmsghndl,
            act_details TYPE bal_s_msg.

      anon_log-&gt;add( obj_to_log = &apos;Here is some text&apos;
                     context = addl_context ).

      msg_handle-log_handle = anon_log-&gt;handle.
      msg_handle-msgnumber = &apos;000001&apos;.
      CALL FUNCTION &apos;BAL_LOG_MSG_READ&apos;
        EXPORTING
          i_s_msg_handle = msg_handle
        IMPORTING
          e_s_msg        = act_details.

      cl_aunit_assert=&gt;assert_equals(
        exp = addl_context
        act = act_details-context-value
        msg = &apos;Did not add context correctly&apos; ).
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;BELNR_D&apos;
        act = act_details-context-tabname
        msg = &apos;Did not add context correctly&apos; ).

    ENDMETHOD.

    METHOD can_add_callback_sub.
      DATA: msg_handle TYPE balmsghndl,
            msg_detail TYPE bal_s_msg,
            exp_callback TYPE bal_s_clbk.

      anon_log-&gt;add( obj_to_log = &apos;Message with Callback&apos;
                     callback_form = &apos;FORM&apos;
                     callback_prog = &apos;PROGRAM&apos; ).

      msg_handle-log_handle = anon_log-&gt;handle.
      msg_handle-msgnumber = &apos;000001&apos;.

      CALL FUNCTION &apos;BAL_LOG_MSG_READ&apos;
        EXPORTING
          i_s_msg_handle = msg_handle
        IMPORTING
          e_s_msg        = msg_detail.

      exp_callback-userexitf = &apos;FORM&apos;.
      exp_callback-userexitp = &apos;PROGRAM&apos;.
      exp_callback-userexitt = &apos; &apos;.

      cl_aunit_assert=&gt;assert_equals(
        exp = exp_callback
        act = msg_detail-params-callback
        msg = &apos;Did not add callback correctly&apos; ).

    ENDMETHOD.

    METHOD can_add_callback_fm.
      DATA: msg_handle TYPE balmsghndl,
            msg_detail TYPE bal_s_msg,
            exp_callback TYPE bal_s_clbk.

      anon_log-&gt;add( obj_to_log = &apos;Message with Callback&apos;
                     callback_fm = &apos;FUNCTION&apos; ).

      msg_handle-log_handle = anon_log-&gt;handle.
      msg_handle-msgnumber = &apos;000001&apos;.

      CALL FUNCTION &apos;BAL_LOG_MSG_READ&apos;
        EXPORTING
          i_s_msg_handle = msg_handle
        IMPORTING
          e_s_msg        = msg_detail.

      exp_callback-userexitf = &apos;FUNCTION&apos;.
      exp_callback-userexitp = &apos; &apos;.
      exp_callback-userexitt = &apos;F&apos;.

      cl_aunit_assert=&gt;assert_equals(
        exp = exp_callback
        act = msg_detail-params-callback
        msg = &apos;Did not add callback correctly&apos; ).
    ENDMETHOD.

    METHOD must_use_factory.
      DATA: log TYPE REF TO object.
      TRY.
          CREATE OBJECT log TYPE (&apos;ZCL_LOGGER&apos;).
          cl_aunit_assert=&gt;fail( &apos;Did not force creation via factory&apos; ).
        CATCH cx_sy_create_object_error.
          &quot;PASSED
      ENDTRY.
    ENDMETHOD.

    METHOD can_use_and_chain_aliases.
      DATA: texts TYPE table_of_strings,
            text TYPE string,
            msg_details TYPE bal_t_msg,
            msg_detail TYPE bal_s_msg.

      anon_log-&gt;a( &apos;Severe Abort Error!&apos; )-&gt;e( |Here&apos;s an error!| ).
      anon_log-&gt;w( &apos;This is a warning&apos; )-&gt;i( `Helpful Information` ).
      anon_log-&gt;s( &apos;Great&apos; &amp;&amp; &apos;Success&apos; ).

      get_messages( EXPORTING log_handle  = anon_log-&gt;handle
                    IMPORTING texts       = texts
                              msg_details = msg_details ).
      READ TABLE texts INDEX 1 INTO text.
      READ TABLE msg_details INDEX 1 INTO msg_detail.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;A&apos;
        act = msg_detail-msgty
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Severe Abort Error!&apos;
        act = text
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      READ TABLE texts INDEX 2 INTO text.
      READ TABLE msg_details INDEX 2 INTO msg_detail.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;E&apos;
        act = msg_detail-msgty
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Here&apos;&apos;s an error!&apos;
        act = text
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      READ TABLE texts INDEX 3 INTO text.
      READ TABLE msg_details INDEX 3 INTO msg_detail.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;W&apos;
        act = msg_detail-msgty
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;This is a warning&apos;
        act = text
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      READ TABLE texts INDEX 4 INTO text.
      READ TABLE msg_details INDEX 4 INTO msg_detail.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;I&apos;
        act = msg_detail-msgty
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;Helpful Information&apos;
        act = text
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      READ TABLE texts INDEX 5 INTO text.
      READ TABLE msg_details INDEX 5 INTO msg_detail.
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;S&apos;
        act = msg_detail-msgty
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).
      cl_aunit_assert=&gt;assert_equals(
        exp = &apos;GreatSuccess&apos;
        act = text
        msg = &apos;Didn&apos;&apos;t log by alias&apos; ).

    ENDMETHOD.

    METHOD get_first_message.
      DATA: msg_handle TYPE balmsghndl.
      msg_handle-log_handle = log_handle.
      msg_handle-msgnumber = &apos;000001&apos;.

      CALL FUNCTION &apos;BAL_LOG_MSG_READ&apos;
        EXPORTING
          i_s_msg_handle = msg_handle
        IMPORTING
          e_txt_msg      = msg.
    ENDMETHOD.

    METHOD get_messages.

      DATA: handle_as_table TYPE bal_t_logh,
            message_handles TYPE bal_t_msgh,
            msg_handle TYPE balmsghndl,
            msg_detail TYPE bal_s_msg,
            msg_text   TYPE char255.

      APPEND log_handle TO handle_as_table.
      CALL FUNCTION &apos;BAL_GLB_SEARCH_MSG&apos;
        EXPORTING
          i_t_log_handle = handle_as_table
        IMPORTING
          e_t_msg_handle = message_handles.

      LOOP AT message_handles INTO msg_handle.
        CALL FUNCTION &apos;BAL_LOG_MSG_READ&apos;
          EXPORTING
            i_s_msg_handle = msg_handle
          IMPORTING
            e_s_msg        = msg_detail
            e_txt_msg      = msg_text.
        APPEND msg_detail TO msg_details.
        APPEND msg_text TO texts.
      ENDLOOP.

    ENDMETHOD.

    METHOD teardown.
      CALL FUNCTION &apos;BAL_GLB_MEMORY_REFRESH&apos;.
    ENDMETHOD.
  ENDCLASS.       &quot;lcl_Test</localTestClasses>
 <classDocumentation OBJECT="ZCL_LOGGER">
  <language SPRAS="E">
   <textLine TDFORMAT="U1" TDLINE="&amp;FUNCTIONALITY&amp;"/>
   <textLine TDFORMAT="AS" TDLINE="The class ZCL_LOGGER is designed to make logging in ABAP more like in"/>
   <textLine TDLINE="other languages.  To create a log and add messages in Android Java,"/>
   <textLine TDLINE="Ruby, and Javascript, at most two lines of code are required: one to"/>
   <textLine TDLINE="create the log and one to add the message.  In addition, different types"/>
   <textLine TDLINE="of objects can be logged by passing them to the same method.  ZCL_LOGGER"/>
   <textLine TDLINE="also has these strengths."/>
   <textLine TDFORMAT="AS" TDLINE="An instance of this class can be passed a number of objects by different"/>
   <textLine TDLINE="methods.  Method ADD accepts a string, bapiret2, bdcmsgcoll, exception"/>
   <textLine TDLINE="object, or a table of any of those data types.  Methods A, E, W, I and S"/>
   <textLine TDLINE="accept exactly the same but they add the type of message corresponding"/>
   <textLine TDLINE="to their names."/>
   <textLine TDFORMAT="U1" TDLINE="&amp;RELATIONS&amp;"/>
   <textLine TDFORMAT="AS" TDLINE="ZCL_LOGGER makes a bunch of calls to function group"/>
   <textLine TDFORMAT="=" TDLINE=" &lt;DS:RE.SAPLSBAL&gt;SBAL&lt;/&gt;."/>
   <textLine TDFORMAT="U1" TDLINE="&amp;EXAMPLE&amp;"/>
   <textLine TDFORMAT="U3" TDLINE="Creating a Log in SLG1"/>
   <textLine TDFORMAT="PE" TDLINE="DATA: log TYPE REF TO zcl_logger."/>
   <textLine TDFORMAT="/" TDLINE="* If you create a log without any parameters, it will only be in memory"/>
   <textLine TDFORMAT="/" TDLINE="log = zcl_logger=&gt;new( )."/>
   <textLine TDFORMAT="/"/>
   <textLine TDFORMAT="/" TDLINE="* If you supply an object and subobject, the log will be created on the"/>
   <textLine TDFORMAT="/" TDLINE="* database the first time a message is stored, so you can view it later"/>
   <textLine TDFORMAT="/" TDLINE="* in SLG1."/>
   <textLine TDFORMAT="/" TDLINE="log = zcl_logger=&gt;new( object = &apos;WF&apos;"/>
   <textLine TDFORMAT="/" TDLINE="                       subobject = &apos;NOTIFICATIONS&apos;"/>
   <textLine TDFORMAT="/" TDLINE="                       desc = |Notifications on { sy-datum }| )."/>
   <textLine TDFORMAT="U3" TDLINE="Logging Strings"/>
   <textLine TDFORMAT="PE" TDLINE="DATA: log TYPE REF TO zcl_logger."/>
   <textLine TDFORMAT="/" TDLINE="log = zcl_logger=&gt;new( )."/>
   <textLine TDFORMAT="/" TDLINE="log-&gt;s( &apos;This is a success message&apos; )."/>
   <textLine TDFORMAT="/" TDLINE="log-&gt;w( &apos;This is a warning message&apos; )."/>
   <textLine TDFORMAT="U3" TDLINE="Logging Errors"/>
   <textLine TDFORMAT="PE" TDLINE="DATA: log TYPE REF TO zcl_logger,"/>
   <textLine TDFORMAT="/" TDLINE="      l_err TYPE REF TO zcx_operation_failed."/>
   <textLine TDFORMAT="/" TDLINE="log = zcl_logger=&gt;new( object = &apos;WF&apos; subobject = &apos;NOTIFICATIONS&apos; )."/>
   <textLine TDFORMAT="/" TDLINE="TRY."/>
   <textLine TDFORMAT="/" TDLINE="    my_class=&gt;do_some_operation( )."/>
   <textLine TDFORMAT="/" TDLINE="  CATCH zcx_operation_failed INTO l_err."/>
   <textLine TDFORMAT="/" TDLINE="    log-&gt;e( l_err )."/>
   <textLine TDFORMAT="/" TDLINE="ENDTRY."/>
   <textLine TDFORMAT="U3" TDLINE="Logging BAPI Messages"/>
   <textLine TDFORMAT="PE" TDLINE="DATA: rtn_msgs TYPE TABLE OF bapiret2."/>
   <textLine TDFORMAT="/" TDLINE="CALL FUNCTION &apos;BAPI_ACC_DOCUMENT_POST&apos;"/>
   <textLine TDFORMAT="/" TDLINE="  EXPORTING"/>
   <textLine TDFORMAT="/" TDLINE="    parameter1 = foo"/>
   <textLine TDFORMAT="/" TDLINE="    parameter2 = bar"/>
   <textLine TDFORMAT="/" TDLINE="  TABLES"/>
   <textLine TDFORMAT="/" TDLINE="    return = rtn_msgs."/>
   <textLine TDFORMAT="/" TDLINE="IF rtn_msgs IS NOT INITIAL."/>
   <textLine TDFORMAT="/" TDLINE="  log = zcl_logger=&gt;new( object = &apos;ACCOUNTING&apos; subobject = &apos;INTERFACES&apos;"/>
   <textLine TDLINE=")."/>
   <textLine TDFORMAT="/" TDLINE="  log-&gt;add( rtn_msgs )."/>
   <textLine TDFORMAT="/" TDLINE="ENDIF."/>
   <textLine TDFORMAT="U3" TDLINE="Displaying a log"/>
   <textLine TDFORMAT="PE" TDLINE="log-&gt;popup( )."/>
   <textLine TDFORMAT="/" TDLINE="log-&gt;fullscreen( )."/>
   <textLine TDFORMAT="AS"/>
   <textLine TDFORMAT="U1" TDLINE="&amp;HINTS&amp;"/>
   <textLine TDFORMAT="AS" TDLINE="Calls to the log can be chained, like:"/>
   <textLine TDFORMAT="PE" TDLINE="log-&gt;e( &apos;An error occurred. See following:&apos; )-&gt;e( l_err )."/>
   <textLine TDFORMAT="U1" TDLINE="&amp;FURTHER_SOURCES_OF_INF&amp;"/>
   <textLine TDFORMAT="AS" TDLINE="If you plan on modifying or adding to this class, see the local unit"/>
   <textLine TDLINE="tests.  You can run them and they will test the class in a number of"/>
   <textLine TDLINE="different scenarios.  You can set breakpoints before running unit tests"/>
   <textLine TDLINE="to see the behavior in action."/>
  </language>
 </classDocumentation>
 <typeUsage CLSNAME="ZCL_LOGGER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
 <forwardDeclaration>ABAP</forwardDeclaration>
 <attribute CLSNAME="ZCL_LOGGER" CMPNAME="AUTO_SAVE" VERSION="1" LANGU="E" DESCRIPT="Persist Messages?" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_LOGGER" CMPNAME="DB_NUMBER" VERSION="1" LANGU="E" DESCRIPT="Application log: log number" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BALOGNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_LOGGER" CMPNAME="HANDLE" VERSION="1" LANGU="E" DESCRIPT="Application Log: Log Handle" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BALLOGHNDL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_LOGGER" CMPNAME="HEADER" VERSION="1" LANGU="E" DESCRIPT="Application Log: Log header data" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAL_S_LOG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="A" VERSION="1" LANGU="E" DESCRIPT="Log ABORT-type Message" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="OBJ_TO_LOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X" PARPREFERD="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="CALLBACK_FORM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="CALLBACK_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="CALLBACK_FM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="IMPORTANCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALPROBCL" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="A" SCONAME="SELF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>method A.
  self = add(
    obj_to_log    = obj_to_log
    context       = context
    callback_form = callback_form
    callback_prog = callback_prog
    callback_fm   = callback_fm
    type          = &apos;A&apos;
    importance    = importance ).
endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="ADD" VERSION="1" LANGU="E" DESCRIPT="Add Message to Log" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="OBJ_TO_LOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X" PARPREFERD="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Additional context not in message text" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="CALLBACK_FORM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="CALLBACK_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="CALLBACK_FM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="TYPE" VERSION="1" LANGU="E" DESCRIPT="Message Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYMSGTY" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="IMPORTANCE" VERSION="1" LANGU="E" DESCRIPT="1 (Severe) to 4 (Addl Info)" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALPROBCL" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="ADD" SCONAME="SELF" VERSION="1" LANGU="E" DESCRIPT="Returns Self for Chaining" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>METHOD add.

  DATA: detailed_msg  TYPE bal_s_msg,
        free_text_msg TYPE char200,
        msg_type  TYPE REF TO cl_abap_typedescr,
        msg_table_type TYPE REF TO cl_abap_tabledescr,
        exception_data TYPE bal_s_exc,
        log_numbers TYPE bal_t_lgnm,
        log_handles TYPE bal_t_logh,
        log_number  TYPE bal_s_lgnm,
        formatted_context TYPE bal_s_cont,
        formatted_params TYPE bal_s_parm.

  FIELD-SYMBOLS: &lt;table_of_messages&gt; TYPE any table,
                 &lt;message_line&gt; TYPE any,
                 &lt;bapi_msg&gt; TYPE bapiret2,
                 &lt;bdc_msg&gt; TYPE bdcmsgcoll,
                 &lt;context_val&gt; TYPE c.

  IF context IS NOT INITIAL.
    ASSIGN context TO &lt;context_val&gt; CASTING.
    formatted_context-value = &lt;context_val&gt;.
    formatted_context-tabname =
      cl_abap_typedescr=&gt;describe_by_data( context )-&gt;get_ddic_header( )-tabname.
  ENDIF.

  IF callback_fm IS NOT INITIAL.
    formatted_params-callback-userexitf = callback_fm.
    formatted_params-callback-userexitp = callback_prog.
    formatted_params-callback-userexitt = &apos;F&apos;.
  ELSEIF callback_form IS NOT INITIAL.
    formatted_params-callback-userexitf = callback_form.
    formatted_params-callback-userexitp = callback_prog.
    formatted_params-callback-userexitt = &apos; &apos;.
  ENDIF.

  msg_type = cl_abap_typedescr=&gt;describe_by_data( obj_to_log ).

  IF obj_to_log IS INITIAL.
    detailed_msg-msgty = sy-msgty.
    detailed_msg-msgid = sy-msgid.
    detailed_msg-msgno = sy-msgno.
    detailed_msg-msgv1 = sy-msgv1.
    detailed_msg-msgv2 = sy-msgv2.
    detailed_msg-msgv3 = sy-msgv3.
    detailed_msg-msgv4 = sy-msgv4.
  ELSEIF msg_type-&gt;type_kind = cl_abap_typedescr=&gt;typekind_oref.
    exception_data-exception = obj_to_log.
    exception_data-msgty = type.
    exception_data-probclass = importance.
  ELSEIF msg_type-&gt;type_kind = cl_abap_typedescr=&gt;typekind_table.
    ASSIGN obj_to_log TO &lt;table_of_messages&gt;.
    LOOP AT &lt;table_of_messages&gt; ASSIGNING &lt;message_line&gt;.
      add( &lt;message_line&gt; ).
    ENDLOOP.
    RETURN.
  ELSEIF msg_type-&gt;absolute_name = &apos;\TYPE=BAPIRET2&apos;.
    ASSIGN obj_to_log TO &lt;bapi_msg&gt;.
    detailed_msg-msgty = &lt;bapi_msg&gt;-type.
    detailed_msg-msgid = &lt;bapi_msg&gt;-id.
    detailed_msg-msgno = &lt;bapi_msg&gt;-number.
    detailed_msg-msgv1 = &lt;bapi_msg&gt;-message_v1.
    detailed_msg-msgv2 = &lt;bapi_msg&gt;-message_v2.
    detailed_msg-msgv3 = &lt;bapi_msg&gt;-message_v3.
    detailed_msg-msgv4 = &lt;bapi_msg&gt;-message_v4.
  ELSEIF msg_type-&gt;absolute_name = &apos;\TYPE=BDCMSGCOLL&apos;.
    ASSIGN obj_to_log TO &lt;bdc_msg&gt;.
    detailed_msg-msgty = &lt;bdc_msg&gt;-msgtyp.
    detailed_msg-msgid = &lt;bdc_msg&gt;-msgid.
    detailed_msg-msgno = &lt;bdc_msg&gt;-msgnr.
    detailed_msg-msgv1 = &lt;bdc_msg&gt;-msgv1.
    detailed_msg-msgv2 = &lt;bdc_msg&gt;-msgv2.
    detailed_msg-msgv3 = &lt;bdc_msg&gt;-msgv3.
    detailed_msg-msgv4 = &lt;bdc_msg&gt;-msgv4.
  ELSE.
    free_text_msg = obj_to_log.
  ENDIF.

  IF free_text_msg IS NOT INITIAL.
    CALL FUNCTION &apos;BAL_LOG_MSG_ADD_FREE_TEXT&apos;
      EXPORTING
        i_log_handle = me-&gt;handle
        i_msgty      = type
        i_probclass  = importance
        i_text       = free_text_msg
        i_s_context  = formatted_context
        i_s_params   = formatted_params.
  ELSEIF exception_data IS NOT INITIAL.
    CALL FUNCTION &apos;BAL_LOG_EXCEPTION_ADD&apos;
      EXPORTING
        i_log_handle = me-&gt;handle
        i_s_exc      = exception_data.
  ELSEIF detailed_msg IS NOT INITIAL.
    detailed_msg-context = formatted_context.
    detailed_msg-params = formatted_params.
    detailed_msg-probclass = importance.
    CALL FUNCTION &apos;BAL_LOG_MSG_ADD&apos;
      EXPORTING
        i_log_handle = me-&gt;handle
        i_s_msg      = detailed_msg.
  ENDIF.

  IF auto_save = abap_true.
    APPEND me-&gt;handle TO log_handles.
    CALL FUNCTION &apos;BAL_DB_SAVE&apos;
      EXPORTING
        i_t_log_handle   = log_handles
      IMPORTING
        e_new_lognumbers = log_numbers.
    IF me-&gt;db_number IS INITIAL.
      READ TABLE log_numbers INDEX 1 INTO log_number.
      me-&gt;db_number = log_number-lognumber.
    ENDIF.
  ENDIF.

  self = me.
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="E" VERSION="1" LANGU="E" DESCRIPT="Log ERROR-type Message" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="OBJ_TO_LOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X" PARPREFERD="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="CALLBACK_FORM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="CALLBACK_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="CALLBACK_FM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="IMPORTANCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALPROBCL" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="E" SCONAME="SELF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>method E.
  self = add(
    obj_to_log    = obj_to_log
    context       = context
    callback_form = callback_form
    callback_prog = callback_prog
    callback_fm   = callback_fm
    type          = &apos;E&apos;
    importance    = importance ).
endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="FULLSCREEN" VERSION="1" LANGU="E" DESCRIPT="Display Messages in Full-Screen" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method FULLSCREEN.

  DATA: profile TYPE bal_s_prof.
  CALL FUNCTION &apos;BAL_DSP_PROFILE_SINGLE_LOG_GET&apos;
    IMPORTING
      e_s_display_profile = profile.

  CALL FUNCTION &apos;BAL_DSP_LOG_DISPLAY&apos;
    EXPORTING
      i_s_display_profile    = profile
      i_t_log_handle         = me-&gt;handle.
endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="I" VERSION="1" LANGU="E" DESCRIPT="Log INFO-type Message" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="OBJ_TO_LOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X" PARPREFERD="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="CALLBACK_FORM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="CALLBACK_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="CALLBACK_FM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="IMPORTANCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALPROBCL" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="I" SCONAME="SELF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>method I.
  self = add(
    obj_to_log    = obj_to_log
    context       = context
    callback_form = callback_form
    callback_prog = callback_prog
    callback_fm   = callback_fm
    type          = &apos;I&apos;
    importance    = importance ).
endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="NEW" VERSION="1" LANGU="E" DESCRIPT="Create New Log in Memory or DB" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="NEW" SCONAME="OBJECT" VERSION="1" LANGU="E" DESCRIPT="Log Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="NEW" SCONAME="SUBOBJECT" VERSION="1" LANGU="E" DESCRIPT="Log Sub-Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="NEW" SCONAME="DESC" VERSION="1" LANGU="E" DESCRIPT="Log Description" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="NEW" SCONAME="CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Addl Context to Log" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="NEW" SCONAME="R_LOG" VERSION="1" LANGU="E" DESCRIPT="Interface to Application Log" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>METHOD new.

  FIELD-SYMBOLS &lt;context_val&gt; TYPE c.

  CREATE OBJECT r_log.
  r_log-&gt;header-object = object.
  r_log-&gt;header-subobject = subobject.
  r_log-&gt;header-extnumber = desc.
  IF object IS NOT INITIAL AND subobject IS NOT INITIAL.
    r_log-&gt;auto_save = abap_true.
  ENDIF.

  IF context IS SUPPLIED.
    r_log-&gt;header-context-tabname =
      cl_abap_typedescr=&gt;describe_by_data( context )-&gt;get_ddic_header( )-tabname.
    ASSIGN context TO &lt;context_val&gt; CASTING.
    r_log-&gt;header-context-value = &lt;context_val&gt;.
  ENDIF.

  CALL FUNCTION &apos;BAL_LOG_CREATE&apos;
    EXPORTING
      i_s_log      = r_log-&gt;header
    IMPORTING
      e_log_handle = r_log-&gt;handle.

* BAL_LOG_CREATE will fill in some additional header data.
* This FM updates our instance attribute to reflect that.
  CALL FUNCTION &apos;BAL_LOG_HDR_READ&apos;
    EXPORTING
      i_log_handle = r_log-&gt;handle
    IMPORTING
      e_s_log      = r_log-&gt;header.

ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="OPEN" VERSION="1" LANGU="E" DESCRIPT="Reopen log on DB" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="OPEN" SCONAME="OBJECT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="OPEN" SCONAME="SUBOBJECT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="OPEN" SCONAME="DESC" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="OPEN" SCONAME="CREATE_IF_DOES_NOT_EXIST" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="OPEN" SCONAME="R_LOG" VERSION="1" LANGU="E" DESCRIPT="Interface to Application Log" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>method OPEN.

  DATA: filter TYPE bal_s_lfil,
        desc_filter TYPE bal_s_extn,
        obj_filter TYPE bal_s_obj,
        subobj_filter TYPE bal_s_sub,

        found_headers TYPE balhdr_t,
        most_recent_header TYPE balhdr,
        handles_loaded TYPE bal_t_logh.

  desc_filter-option = subobj_filter-option = obj_filter-option = &apos;EQ&apos;.
  desc_filter-sign = subobj_filter-sign = obj_filter-sign = &apos;I&apos;.

  obj_filter-low = object.
  APPEND obj_filter TO filter-object.
  subobj_filter-low = subobject.
  APPEND subobj_filter TO filter-subobject.
  IF desc IS SUPPLIED.
    desc_filter-low = desc.
    APPEND desc_filter TO filter-extnumber.
  ENDIF.

  CALL FUNCTION &apos;BAL_DB_SEARCH&apos;
    EXPORTING
      i_s_log_filter = filter
    IMPORTING
      e_t_log_header = found_headers
    EXCEPTIONS
      log_not_found  = 1.

  IF sy-subrc = 1.
    IF create_if_does_not_exist = abap_true.
      r_log = zcl_logger=&gt;new( object    = object
                               subobject = subobject
                               desc      = desc ).
    ENDIF.
    RETURN.
  ENDIF.

* Delete all but the last row.  Keep the found_headers table this way
* so we can pass it to BAL_DB_LOAD.
  IF lines( found_headers ) &gt; 1.
    DELETE found_headers TO ( lines( found_headers ) - 1 ).
  ENDIF.
  READ TABLE found_headers INDEX 1 INTO most_recent_header.

  CREATE OBJECT r_log.
  r_log-&gt;auto_save = abap_true.
  r_log-&gt;db_number = most_recent_header-lognumber.
  r_log-&gt;handle = most_recent_header-log_handle.

  CALL FUNCTION &apos;BAL_DB_LOAD&apos;
    EXPORTING
      i_t_log_header = found_headers.

  CALL FUNCTION &apos;BAL_LOG_HDR_READ&apos;
    EXPORTING
      i_log_handle = r_log-&gt;handle
    IMPORTING
      e_s_log      = r_log-&gt;header.

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="POPUP" VERSION="1" LANGU="E" DESCRIPT="Display Messages in Popup" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>method POPUP.
* See SBAL_DEMO_04_POPUP for ideas

  DATA: profile TYPE bal_s_prof.
  CALL FUNCTION &apos;BAL_DSP_PROFILE_POPUP_GET&apos;
    IMPORTING
      e_s_display_profile = profile.

  CALL FUNCTION &apos;BAL_DSP_LOG_DISPLAY&apos;
    EXPORTING
      i_s_display_profile    = profile
      i_t_log_handle         = me-&gt;handle.

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="S" VERSION="1" LANGU="E" DESCRIPT="Log SUCCESS-type Message" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="OBJ_TO_LOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X" PARPREFERD="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="CALLBACK_FORM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="CALLBACK_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="CALLBACK_FM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="IMPORTANCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALPROBCL" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="S" SCONAME="SELF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>method S.
  self = add(
    obj_to_log    = obj_to_log
    context       = context
    callback_form = callback_form
    callback_prog = callback_prog
    callback_fm   = callback_fm
    type          = &apos;S&apos;
    importance    = importance ).
endmethod.</source>
 </method>
 <method CLSNAME="ZCL_LOGGER" CMPNAME="W" VERSION="1" LANGU="E" DESCRIPT="Log WARNING-type Message" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="OBJ_TO_LOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X" PARPREFERD="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SIMPLE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="CALLBACK_FORM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="CALLBACK_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="CALLBACK_FM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="IMPORTANCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALPROBCL" PAROPTIONL="X"/>
  <parameter CLSNAME="ZCL_LOGGER" CMPNAME="W" SCONAME="SELF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_LOGGER"/>
  <source>method W.
  self = add(
    obj_to_log    = obj_to_log
    context       = context
    callback_form = callback_form
    callback_prog = callback_prog
    callback_fm   = callback_fm
    type          = &apos;W&apos;
    importance    = importance ).
endmethod.</source>
 </method>
</CLAS>
